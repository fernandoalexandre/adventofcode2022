/*
Copyright Â© 2022 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"fmt"
	"log"
	"os"

	"github.com/spf13/cobra"
)

// day17Cmd represents the day17 command
var day17Cmd = &cobra.Command{
	Use:   "day17",
	Short: "A brief description of your command",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("day17 called")

		pieces := []TetrisPiece{
			{[][]rune{[]rune("..####.")}, 4},                                                          // -
			{[][]rune{[]rune("...#..."), []rune("..###.."), []rune("...#...")}, 5},                    // +
			{[][]rune{[]rune("....#.."), []rune("....#.."), []rune("..###..")}, 5},                    // inverse L
			{[][]rune{[]rune("..#...."), []rune("..#...."), []rune("..#...."), []rune("..#....")}, 4}, // I
			{[][]rune{[]rune("..##..."), []rune("..##...")}, 4}}                                       // square

		f, err := os.OpenFile("testlogfile", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666)
		if err != nil {
			log.Fatalf("error opening file: %v", err)
		}
		defer f.Close()

		log.SetOutput(f)

		day17p1(example, pieces)
		day17p1(actual, pieces)
	},
}

var example = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"

var actual = "><<<<>><<<>><>>><<<>>>><<<<>>>><<>>><>>><>><<<>>><<<>>>><>><>>>><<<>><<<<>><<<><<<<>>><<>>><<><<<>>>><<<><>><<>><<<<>>><>>><<<>>>><<<<>>>><><>>><>>><<<<>>>><<<<>>><<<<><<<>>>><<><<<>>>><<<<>>><>>>><<<>>>><>>><<>>><<<>><<<<>><<>>><<<><<>>><<>>>><<>>><>>><<<>>><<<>>>><<>>><<<>><<<<>>><>>>><<><>>>><>>>><>>>><<>><<<>>>><<<>>><<>>>><<<<>>>><<<><>>>><<<>>><<<<>>><<>>>><<<<>><<<>>>><<><<><<>><<<<>>>><<>>>><<<<>><<<<>>><<>>>><<>>><<<>>>><<<<>><>><<<<>><<<<><<<<>>><<>>><<<<><<<<>>>><>>><<<<>><<>>>><<<><>><<<<>>>><><<<><<<<>>>><<<>>><<<><><<<>>><>>><>>>><<<>>><<><><<>>><<<<><>>><>><>><<>>>><<<<>><<<>><<<>>><<>>><>>>><><<>>><<<<><>><>>>><>>>><>><>><<>>><>>><>>><<<<>><<<<><<<>><<><>><>><<<<>>>><<>><<<>>>><<><<<><<<<>><<<>><<>><>>>><<>>>><<>>>><<>>><<<><<<>><<<>>><<<<>>><>><<>><<<><><<<<><>>><<<<><<<>>><<<>>>><<<><<<>><<<<>>>><<>>><<><><<<<><>><<<><<<<>>><<<<>>>><<><<><<<<>>>><<<>>>><<<<>><<<<>><<<<>>><<<<>>><<>>>><<>>>><<<>>><<>>>><<<><<>>>><><<>>>><>>>><<>><>>>><<<>><<<<>>>><<<>><>>>><<<>><<>>><<<>>>><>>><>>>><<<>><<<>>>><<<<><<<<><<<<>>>><<>><<<><<>>>><<<>>><>>>><><<<><<>><<<><<<>>><>><<<><<<>><>><<<<><<<<><>><<<>>><<<>>><>>><<<<><>>><<<>><<<<>>><><<<>>>><<<><>><<<><<<<>><<<<>>>><><<<<>>><<<<>>>><<<<>><>><<><<<<><<>>><<>>>><<<><<>>>><>><<<><<>><>><<<<>><><<>>>><<>><><<>>><<<>><<><<<>><<><<><>>>><<<<>>><>>><<<>>>><<><<<>>><<<<><<<<>>>><<><>><><<>>><>><><<<>><>>>><>><<<<><<>>><<<<>>><<<>><<<<>>><>>><<<<>>><>>><<<<><<<<>><<<<><<<><<<>>>><<<>>>><<<>>>><<<<>><>><<<<>>><<<<>><<<>><<<>><>>>><<><>>><<<>>>><>><><><>>><<>>><<<>><>><<>>>><<<<>>><<<<>><<><<<<>><>><>>><<<><<>>><<><<><<>>><<>>><<<<>>><<><<<>>>><>>><>>>><<<<><<<>>><<>>><>><<>>>><<<>><<<<>><<<<>><<<>><<<<><<<>><<>>><<<<>>>><<><<<>><><<<<>>><<<<>>>><<<>><<>>><>><<<<>>>><>>><<><<<<>>>><>><<<>>>><<>>>><<<>>><><<<>>>><>>><<><<<><>>><<><<<<>><<>>>><<<<>>><<<<><<<>>>><<<<><<<<>><<<<>><>>>><<><>><<<>>><>><<>><<<<>>><<<>><<><<<<>><<<>>>><<>>>><<<<><><<<<>>>><<>>><<<>>><<<>><<>><<<><>>>><<><<<>><<<>>>><>>><<>><<<><><><<<>>>><>>>><<<<>>><<<><<<<>>><<>>><<<>><<<><<<<>>><<<<>><<<<><<>>>><>><<<<>><<<>>>><<<<>>><<<>><<>><<<>>>><>><>>><>>>><<>>>><<<>><<<<>>>><<<>><<<>>>><<<<>><<<>>><>>><>>><<>><>>><<<<>>>><<><><<><<<<>><>>><>>>><<<>>><<>><><>><><<<<>>>><<<>>>><>>>><>>>><<<<>><<<>><<>><<>>>><<<><>>><<>>><<>>><<<>>><<<<><<>><<><<>><>>>><<<<>>>><>><<>><>>><<<>>><>>>><<>>>><>>>><<<><<<>>>><<<<>><<>>><>><<>>><<<>>>><<<<><>>>><<<<>><<><><<<<>>><>>><<<>><><>><>>><<>>>><<<<><<<>>>><<<>><<>>><<<>><<<>><<<<><><>>>><<>>>><<>>><<<>><<<<><<<><<>>>><>>><<<>><<<<>><>>>><<<<>>>><<<<>>>><>>>><>>>><<<>>><>>><<>><<<>><>><<<<>><<<<>><<<><><<><<<<>><>>><>>><<<>>>><><><<>>>><<<>>><<<<>>><>>>><<<>>><<<><<<>>>><<>>><<<>>>><>>>><<><<><<<<>><<<><<<<>><<<>>>><<><<<<>>><<<<>><<>>>><<<<>><>>>><>><<<>>>><<<<><<<<><><<<><<><<<<><<<><<<<>>>><<<<>>>><<>>><<<<><<><<<<>>><<<<>>><>>>><>><>>><><<<>>><>>>><>><<<>><<<<>>><<>><<><<<>>>><<><<><<><<>><<<>>><<<>>><>>>><>><>><<<<>>>><<>>><<<<>>><<>><<<<><<>>>><>>>><<<<>>>><<<<>><>>><<>>>><<<><<<<>><<<<><<>>>><><<>>><<<<>>>><<>>><<><<>><>>><>>>><<>><<<><<<<><<<<>><<<>><<>>>><>><<<<><<<>><<><<<<><<<>><>>>><<>>><<<<><>>><<<<>>>><<<>><>>>><>><<<<>><>><<<<>>>><>>><><>>><<><>><<<>>>><<<>>><<<<><<<<>><>><<>>>><<<<>><>><<<>><<<<>>>><<>>><<<><<<><<<<>><<<<><<>>>><<<<>>>><<<<>>>><<<>><<<<>><>>><<>>><<<<>>><>>>><<<<><<>><<<>>>><><<<<><<<>>><<<<><<<<>><<<>><<<<>>><<<<>>><<><<><<<>>>><><<<>>>><<>>><<<<>>>><<<<>>>><>>>><<<<>>>><>>><<<>><<<<>>><<><><<<<>>>><<<>>>><>>>><<>>><<<<>>><<<<>><<><<<>><>>>><>>><>><>>><<>>>><<>>><<<<><<<>><<>>><>>>><<<><>><<>>>><>>><<>>><<<>>><<><<<<>>><<>><<<<><<>>><<<><<<>>><<>>><<<<>><><<<>>>><<<<>>><><<>><<<><<<<>><><<<<>><<<>><>><><<<>>><<<<>>><>>><<>><<<>><>><<>><<<><<<>><<>>>><<>>><<><<>>>><<>>>><><>>><<><<<<>><><><<<>><<<>>>><<<>><>>><>>>><><<<>><><>>><>>><<>>><><<<<>>>><<><<<<>>>><<>>>><<<<>>>><<><<<<>>><<<>>><<>>>><<<>>><<<<>><<><<<<><>>>><<<<><<>><>>>><>>><<<<>><<<>>>><<<<>>><<><<<<>>><<<>>><>>><<<<>>><<<<>><>>><<<<>>><>><<<>>><<<<>><<<<>><<<<><>>><>>>><<>>>><<>><<>>>><><<>>><<<>><>><>>><<<<>>><<<>>>><<<>>>><<>>><<<<>>><>>>><<<<>><<>>><><<<>>><>><>><<>><><<<<>>>><<><<>><<<>>>><<<>><>><<><<<<>><<<>><<<>><<<>>>><<<>>><<<<><<><<<<>>>><<<><<>>>><<<><<<>>><<<>>><<<>>><>>>><<<<>>><<<>><<<<>>>><<<><>>>><<><<<<>>>><<<>>><<<>>>><<<<>>><<<<><><<>>>><>><<<<>>>><<><<<<>>>><<<<>>><<<<><>>>><>><>>><<<>>><<<<>><>><>><>>><<>><>>><<>>><><<<<><<<><<>>><<><>>><<><<>>>><>>><<>>>><<<>>><<<>>>><<>>>><<>>>><<>>>><<<<>><<<<><><<<><>>>><<<><>><<<>>><<<<><<><<>>><<>>><<>><<<<>>>><<>>><<>>><<<>>>><<<>>><<<>>>><<<>>><<<<>>>><><<<><<<>><<>>>><<>>><<<<><<<>>>><<>>><<>>><<<>><<>>><<><>>><<<<>>>><<<>>><<<><<<<>>>><<<>>><<><>>><<><<<>><<>>><<<<>><>>>><>>><<<>>><<<>>>><<<<>>><<<>>><>>><>>><<<><<<>><<<><<<<>>><<>>><>>>><<<><<<<>>><<>>><>><<<>>><<><<><<>><<<<>><<<>>><<><<<<><<<<>><<<<>>>><><<<><>>><<>><<<<>>><>><>>>><<><<><<<>><<>><<>>>><<<<><<<>>>><<<>>>><<<>>>><<<><<<<>>>><<<>><<<<><<<>><>>>><>>><<><>>>><>>><<<<>>><<<<>>><<<>><<>>>><<<>>><><>><>><<>><>>>><>>>><>>>><>><<>>>><<<>><<><>><<<<>>><<<>>><<<<>><<<<><<<<>><>>><<<><><<<><<><<>>><<><<><<<>>>><<<>>><<<<>>><><<<>><<<>>>><<<>><>><<<>>><<<<>><>>><<<>><>><<<<>>>><<><>>>><<<><<><<>><>>>><<<<>>>><><<>>>><<>><<>>><><<<>>>><<<>>><<<>>><>><><<<<>><<<<>>><<<<>><<<<><<<>>>><<>>>><<>><<>>>><<><>>>><<>><<<<>>><<<>><>>><<<<>>>><<>><<<<><<<<>>>><<>>><<<>>><<<<>>>><><<<<>><<<><<<<><>>>><<><<><<>><>>>><><>>><<<>>><<<>>>><<>>><<<<>><<<<>>>><<<><<<>><<>>>><>><<><<<>><<<<><>><<>><<<>><<><<<<>>>><<>>>><<<>>>><<<>><<<<><<<<>>>><>>><>>><<<>>><<>><>>><<<>>>><<<>><>>>><><>><<<>><<><<<>><<<>>><<<<>>><<>>><<>>><<<<>><>>><<>>><>>><<<>>><<<<><<>>>><<<<>>><<<<>><<<>>><<>>>><>>><<<<><>>><<<>><<><<><<><><<<>>><<<>>>><<><>><<<>><<<<>><<>>><>>><<<<>><<<><<<<>><>>><>>>><<<<><<<<>>>><<<<>>>><<><<>>>><<<<>><>><<>>><>>>><<>><>><<<>><<<>>><<<<>><>>><<<<>>>><<<>>>><<<<><><<<<><<>>><<<<>>>><<<<>><<<<><<<<><>><><<>><<<>><<<<>>>><<<<>>><<<>>>><<<>><<<>>><>>><<<<>><<<<><<<>><<<<>>>><<<>><<<<><<>><<<>>>><<<<><<<<>>><>>><<<>>><<<>>>><>><>>><<><<><<<<><<>>>><<>>>><<<>>>><<<>>><<<>><<<><<<><><<<>>>><<<<><>><<<>>><>>>><<<>>>><>>>><<>><<><<>>>><<<<>>>><<<<><<><>>><<<<>><<>>><<>><<<>><>><<>>><<<>>>><<<<>><<<>><<<<><<<>><<<<>>>><<<>>>><<<>><><<<>>>><<<>><<<<><><>>><>>><<>><<<>>>><>>>><>>><<<<>>><<<<>>>><<<>><>>>><<>><>>>><<<>>>><<>>>><<<<>>>><<<>><<<<><<<<>>>><<<>>><><<<>>>><>>><<<<>><<<<>>><><<<<>><<<>>><<<<>>><<<><<<<>>><<<>>>><<<><<<><><<<<>>><<<<>>><<<>><<<<>><><<<>>><>>><<<>>><<<>>>><>>>><<<><<>>><<>>><>>>><<<>><>><><<<<>>><<<>>>><<>>><<><>>>><<<>><<<><<><<<>>>><>>>><<<<>><<<<>><<<>>>><<<><<<><>>>><<<<>><<><<>>><<<<>>><>>><<<><><<<<>><>><>>><<<>>>><<<><><<<<><<<<>>><<><<<<>><<>>>><<><>>>><<<>>><<<>>>><<<>>><><<<<><<>>><<><<<><<<<>>><<>>>><>><<<>>>><<>>>><<><<<>>><<>>>><>><<<>>>><<<<>>>><>>><<><><<><><>><<>><>><>><<>>>><<>><<<<><<<<>>>><><<>><>>>><<><<><<>>><<<><<<>>>><<<>>>><<<<>>><<<>>><<<<>><<<>>>><<<><>>><><<<<><<<<>>>><<>>>><>>>><<>>>><>>><<>><<<<><<<<>>>><<<<><>>>><<<>><<>>><<<<><<>><<>><><<<>>><<<>>>><<<>>><>>><><<<<>>>><<>>>><>>>><><<<<>>>><<>>>><<>><>>>><<<<><<<>>>><<>><<<<>>>><<<><<<><<<>>><<>>><>><<>>><>><<<>>><<<<>><<>><<<>>>><<<>>>><<><<>>>><<>><<<<>><<<>>>><<>>>><<<>>><<><<>>>><<>>><>>>><<<><<<>><>><<<<>>><<>><>><<>><>>>><><<<>><<><<>>><<>><<<><<><<><<<><><<>>>><<<><<<>>><>>>><<<>>>><<<<>>><<<><>>><>>>><<>><<<<>><>><<<>><<>><<<><><<>>>><<<<>>><<<>>><<<<>><<>><<<>><>><<<>>><<<>>><<<<>>>><<>>>><<<<>>><<<>><<<<><><<<<>>>><>>>><<<<>><<<<><<<<>><>>>><<<><>><<<>>><<<<><<<<>>><<<<><<>>>><<><>><<<>>>><<<<>>>><>>><<<>><<<<>>><>>><>><<<>>><<<>>>><>>>><<<<>><<>><<<>>><<<<>>><<<<><<<>>><<<><<<<><><<<><<><<<><<<<>>><<<<>><<<<>><>><>><<><<<>>><<<><<><<>>><<<<>>><<<>>>><<><<<>>>><<<>><<<>><>>>><>>><>><<<>><<>>>><<<<>>>><>><<>><<<>>><>>>><<>><<<>><<><<>>>><><<<><>>><<>>>><<<<>>>><<<>>>><<<>>><<<><<<>>>><<<>>>><<<>>>><<<<><>>><>><<>><<<><<<><<>><>>><<<>>><<<>><<<>>><<<<>>>><<<<><>>><<>>><>>><<<<>><<>><>>>><<>>><<<<>>><<<<>>><<<<><<<<>>><<<>><><><<<><<<<>>><>>><<><>><<>>>><<>>><<<>>>><<<<>>><<<>><<>><>>><>>><<<<>>>><<<<>>>><<>><<<<>>>><>>>><<<><<<>>><<<>>>><<<<>>><><<<<>><<><<>>>><<<<>>><<<<>>><<<<><<<>>>><<><<>>>><><<<>>>><<><<>>><<>>>><<<><<><>>><<<<>>><<<>>>><<><<>>><<<<><>>>><<>>><<<>>>><<<<><<>><<>><<>>><><<<>><<<<>><><<<<><>><<>><<<>>>><<>>>><>>>><<><>><>>><<<>>><>>>><<<><<><<<>><<<>><<>>><<><<>>><<<>>><<<>>>><>>><>><><<><<>>><<<<>>><>>><<<><<><<<>><>><<>>><>>>><<>>>><<<><>>>><<>>>><>>>><<<<>>><<>>><>>><<>><<><<<<>>>><>>><<>>>><><<><<<>>><<>><>>><<<<>>>><>>>><<<>>><<<>><<<>><<>>>><>><>>><<<><<<>>>><<<<>><<>>><<<<>>><<>>><<>>><>>>><<<<><<<>>>><<<>>><<<<><<><<>>>><<<>>><<<<>>><><<<<>><<<><<<<>><<<>><<<<><<<<>>>><>><>>><<><<<>><<<>>><><<<<>><<<<>><<>>><<<<>>><>>><>><<<>><<<>><>>><<<>>>><<<>><<<<><<><<<<>>><<<>>>><<<<>>><<<<>>><><<<>>><<<>><<<<><<<<><<<>>><<<>>>><><<<>><>>>><<<<>><<>>><<<>>><<>>>><<<<>>>><<>>>><<<<>>><<>>><<>><>>><<>>><<<<>><>>><><>><><<>>>><<>>><>>><<<<><<<<>><<<<>>><<<<>>><<<<>>>><<<<>>><<<><><<<<><>>>><>><<<<>><<<<><<>>>><><>>>><<<<>><<>>>><<<><>>>><<<>><<<>><>><>>>><<<>>><<<>>><<>>>><<<><<<>><>>>><>>><<<>>>><><<>>><<<>>>><<>>>><<<>>>><<<<><<><>><>>>><<>>>><<<<>><<<><<<<>>><>>><<<>>><>><>>>><<<<>>>><<<>><<>>><>>><<<>><<<<>>><<<>>><<>>><<>>><>>>><<>>>><<<<>>>><<>>>><<><<>><>>>><<>>>><<<<>>>><<<<><<<><>>>><<<>>>><<<<>>>><><<<><<<<><<<<>><<<><>>><<>>><>><<>>>><<>><<<<>>>><<>>><<>>>><<>><>><><>><<<<><>>><<>>>><<>>>><>>><><<<><<<<>>><<<>>>><<>>><<<<>><<>>><<<<>>><<<<>><<>>><><<>>><<>><<<>>><<>>><<<>>><<>><<><>>>><>><>>><<>><<>>><<<<>>>><<<>>>><<<<>><<<<>>>><<<<><<<><>>><<<<><<>>><<>><<<<><<<><<<><<><<><>>>><<>><<<><>><<>><<<><<<><<<>>><<<><<>><<<><<<>>>><<>>>><<><>>>><<<<>>><><<><<<>><>>>><<<>>><<<>>>><>><<<>>>><<>>>><><<<>>><<>><><<>><>>><<>>><<><<<>><<<<>><><<<<>>>><<><<<<>>>><<<<>><<<><<<<>><<<<>>><<><<><>><><<<>>>><<<>>>><<<<>><<<>>><<>>><<>>>><>>>><<>>><>>>><<<<>><<<>>><<<><>>><>>><<<><<<<>>>><<<>>>><<<<><>>><<<>><<>><<>>><<>>>><>>><<<>>><<<>>>><<<>>>><<<<>><><<<><>><>><<<<>>>><<<>>>><<><>><><<<<>>>><><>>>><<>><<<<>><<<<><<<<>>>><<<>>><<<>>><<<>><<<<>><<>><>>><<>><<>><<<<>>>><<<>><>>>><<<<>>>><<<>>>><<>>><<<>>>><<<<><<<>><<<>>><<<<>>><><<>>>><<>>><<>>>"

type TetrisPiece struct {
	format     [][]rune
	num_blocks int
}

func day17_can_move(command rune, rock TetrisPiece, tunnel *[][]rune) bool {
	num_validated := 0
	for i := 0; i < len(*tunnel); i++ {
		for j := 0; j < len((*tunnel)[0]); j++ {
			switch command {
			case '>':
				//log.Printf("can_move: %c | %d | %d", (*tunnel)[i][j], i, j)
				if (*tunnel)[i][j] == '#' && j == 6 { // would overflow to the right
					return false
				} else if (*tunnel)[i][j] == '#' && (*tunnel)[i][j+1] == WALL { // occupied
					return false
				}
			case '<':
				if (*tunnel)[i][j] == '#' && j == 0 { // would overflow to the left
					return false
				} else if (*tunnel)[i][j] == '#' && (*tunnel)[i][j-1] == WALL { // occupied
					return false
				}
			case 'v':
				if (*tunnel)[i][j] == '#' && i == len(*tunnel)-1 { // would overlap floor
					return false
				} else if (*tunnel)[i][j] == '#' && (*tunnel)[i+1][j] == WALL { // occupied
					return false
				}
			}

			if (*tunnel)[i][j] == '#' {
				num_validated++

				if num_validated == rock.num_blocks {
					return true
				}
			}
		}
	}
	return true
}

func day17_run_command(command rune, rock TetrisPiece, tunnel *[][]rune) bool {
	num_moved := 0
	if day17_can_move(command, rock, tunnel) {
		for i := len(*tunnel) - 1; i >= 0; i-- {
			switch command {
			case '>':
				for j := len((*tunnel)[0]) - 1; j >= 0; j-- {
					if (*tunnel)[i][j] == '#' {
						(*tunnel)[i][j+1] = '#'
						(*tunnel)[i][j] = '.'
						num_moved++

						if num_moved == rock.num_blocks {
							return true
						}
					}
				}
			case '<':
				for j := 0; j < len((*tunnel)[0]); j++ {
					if (*tunnel)[i][j] == '#' {
						(*tunnel)[i][j-1] = '#'
						(*tunnel)[i][j] = '.'
						num_moved++

						if num_moved == rock.num_blocks {
							return true
						}
					}
				}
			case 'v':
				for j := 0; j < len((*tunnel)[0]); j++ {
					if (*tunnel)[i][j] == '#' {
						(*tunnel)[i+1][j] = '#'
						(*tunnel)[i][j] = '.'
						num_moved++

						if num_moved == rock.num_blocks {
							return true
						}
					}
				}
			}
		}
		return true
	} else if command == 'v' { // Block it
		for i := 0; i < len(*tunnel); i++ {
			for j := 0; j < len((*tunnel)[0]); j++ {
				if (*tunnel)[i][j] == '#' {
					(*tunnel)[i][j] = WALL
					num_moved++

					if num_moved == rock.num_blocks {
						return false
					}
				}
			}
		}
	}
	return false
}

func d17_print_tunnel(tunnel [][]rune) {
	for _, line := range tunnel {
		log.Printf("|%s|", string(line))
	}

	log.Println("+-------+")
	log.Println("==============")
}

func copy_rune_array(old [][]rune) (new [][]rune) {
	new = [][]rune{}

	for i := 0; i < len(old); i++ {
		curr := []rune{}
		for j := 0; j < len(old[i]); j++ {
			curr = append(curr, old[i][j])
		}
		new = append(new, curr)
	}

	return new
}

func day17p1(commands string, pieces []TetrisPiece) {
	log.Println("Part 1")

	target_rocks := 2022
	num_rocks := 0

	empty_line := "......."

	tunnel := [][]rune{}
	curr_rock_idx := 0
	curr_command_idx := 0

	for num_rocks < target_rocks {
		log.Printf("%d", num_rocks)
		curr_rock := pieces[curr_rock_idx]
		curr_rock_format := pieces[curr_rock_idx].format

		// Add the three empty height
		for i := 0; i < 3; i++ {
			tunnel = append([][]rune{[]rune(empty_line)}, tunnel...)
		}
		// Add the piece
		tunnel = append(copy_rune_array(curr_rock_format), tunnel...)

		//d17_print_tunnel(tunnel)

		for {
			curr_command := rune(commands[curr_command_idx])
			//log.Printf("Command %c", curr_command)

			// Run command
			day17_run_command(curr_command, curr_rock, &tunnel)
			//d17_print_tunnel(tunnel)
			// move below

			if !day17_run_command('v', curr_rock, &tunnel) { // if didn't move below
				num_rocks++

				break
			}

			curr_command_idx = (curr_command_idx + 1) % len(commands)

			//d17_print_tunnel(tunnel)
		}

		for i := len(tunnel) - 1; i >= 0; i-- {
			if string(tunnel[i]) == empty_line {
				tunnel = tunnel[i+1:]
				break
			}
		}

		//d17_print_tunnel(tunnel)

		curr_rock_idx = (curr_rock_idx + 1) % len(pieces)
		curr_command_idx = (curr_command_idx + 1) % len(commands)
	}

	d17_print_tunnel(tunnel)
	log.Printf("%d", len(tunnel))
}

func init() {
	rootCmd.AddCommand(day17Cmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// day17Cmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// day17Cmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
